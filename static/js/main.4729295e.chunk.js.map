{"version":3,"sources":["helpers.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["addId","arr","ids","map","item","id","Math","max","UserInfo","user","className","href","email","name","TodoInfo","todo","cn","completed","title","TodoList","todos","username","userId","usersFromServer","find","u","App","useState","todosList","setTodosList","setTitle","selectedUserId","setSelectedUserId","isTitleEmpty","setIsTitleEmpty","isIdSelected","setIsIdSelected","newTodo","action","method","onSubmit","e","preventDefault","prevTodosList","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4729295e.chunk.js","sourcesContent":["export const addId = (arr: { id: number }[]): number => {\n  const ids = arr.map(item => item.id);\n  const maxId = Math.max(...ids);\n\n  return maxId + 1;\n};\n","import { FC } from 'react';\nimport { User } from '../../types/types';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import { FC } from 'react';\nimport cn from 'classnames';\nimport { Todos } from '../../types/types';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todos;\n};\n\nexport const TodoInfo: FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': todo?.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo?.user && (\n        <UserInfo\n          key={todo.user.id}\n          user={todo.user}\n        />\n      )}\n    </article>\n  );\n};\n","import { FC } from 'react';\nimport { Todos } from '../../types/types';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todos[];\n};\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo: Todos) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport { addId } from './helpers';\nimport { Todos } from './types/types';\nimport { TodoList } from './components/TodoList';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst todos = todosFromServer.map(todo => {\n  const user = usersFromServer.find(u => {\n    return u.id === todo.userId;\n  }) || null;\n\n  return {\n    ...todo,\n    user,\n  };\n});\n\nexport const App: React.FC = () => {\n  const [todosList, setTodosList] = useState<Todos[]>(todos);\n  const [title, setTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [isIdSelected, setIsIdSelected] = useState(false);\n\n  const newTodo: Todos = {\n    id: addId(todosList),\n    title,\n    completed: false,\n    userId: selectedUserId,\n    user: usersFromServer.find(user => {\n      return user.id === selectedUserId;\n    }) || null,\n  };\n\n  const handleValidation = () => {\n    setIsTitleEmpty(!title);\n    setIsIdSelected(!selectedUserId);\n  };\n\n  const clear = () => {\n    setTitle('');\n    setSelectedUserId(0);\n  };\n\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    handleValidation();\n\n    if (!title || !selectedUserId) {\n      return;\n    }\n\n    setTodosList(prevTodosList => [...prevTodosList, newTodo]);\n    clear();\n  };\n\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsTitleEmpty(false);\n  };\n\n  const handleSelected = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+e.target.value);\n    setIsIdSelected(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={onSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={handleInput}\n            />\n          </label>\n          {isTitleEmpty\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={selectedUserId}\n              onChange={handleSelected}\n            >\n              <option value={0} disabled>Choose a user</option>\n              {usersFromServer.map(user => (\n                <option\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {isIdSelected\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todosList} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}